Que 1 stack implementation
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

class Stack {
public:
    Node* top;
    Stack() : top(nullptr) {}

    void push(int value) {
        Node* newNode = new Node(value);
        newNode->next = top;
        top = newNode;
        cout << value << " pushed to stack." << endl;
    }

    void pop() {
        if (top != nullptr) {
            Node* temp = top;
            cout << top->data << " popped from stack." << endl;
            top = top->next;
            delete temp;
        } else {
            cout << "Stack is empty! Nothing to pop." << endl;
        }
    }

    int peek() {
        if (top != nullptr) {
            return top->data;
        }
        return -1;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    void display() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
        } else {
            cout << "Stack contents: ";
            Node* temp = top;
            while (temp != nullptr) {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
};

int main() {
    Stack stack;
    int choice, value;

    do {
        cout << "\n--- Stack Menu ---\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Peek\n";
        cout << "4. Display\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to push: ";
                cin >> value;
                stack.push(value);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                value = stack.peek();
                if (value != -1) {
                    cout << "Top element is: " << value << endl;
                } else {
                    cout << "Stack is empty." << endl;
                }
                break;
            case 4:
                stack.display();
                break;
            case 5:
                cout << "Exiting Stack Program." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 5);

    return 0;
}
que 2 queue implementation

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

class Queue {
public:
    Node* front;
    Node* rear;
    Queue() : front(nullptr), rear(nullptr) {}

    void enqueue(int value) {
        Node* newNode = new Node(value);
        if (rear != nullptr) {
            rear->next = newNode;
        }
        rear = newNode;
        if (front == nullptr) {
            front = newNode;
        }
        cout << value << " enqueued to queue." << endl;
    }

    void dequeue() {
        if (front != nullptr) {
            cout << front->data << " dequeued from queue." << endl;
            Node* temp = front;
            front = front->next;
            if (front == nullptr) {
                rear = nullptr;
            }
            delete temp;
        } else {
            cout << "Queue is empty! Nothing to dequeue." << endl;
        }
    }

    int peek() {
        if (front != nullptr) {
            return front->data;
        }
        return -1;
    }

    bool isEmpty() {
        return front == nullptr;
    }

    void display() {
        if (front == nullptr) {
            cout << "Queue is empty." << endl;
        } else {
            cout << "Queue contents: ";
            Node* temp = front;
            while (temp != nullptr) {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
};

int main() {
    Queue queue;
    int choice, value;

    do {
        cout << "\n--- Queue Menu ---\n";
        cout << "1. Enqueue\n";
        cout << "2. Dequeue\n";
        cout << "3. Peek\n";
        cout << "4. Display\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to enqueue: ";
                cin >> value;
                queue.enqueue(value);
                break;
            case 2:
                queue.dequeue();
                break;
            case 3:
                value = queue.peek();
                if (value != -1) {
                    cout << "Front element is: " << value << endl;
                } else {
                    cout << "Queue is empty." << endl;
                }
                break;
            case 4:
                queue.display();
                break;
            case 5:
                cout << "Exiting Queue Program." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 5);

    return 0;
}




que 3  #include <iostream>
#include <cmath>
using namespace std;

class BankAccount {
private:
    double balance;
    double rateOfInterest;

public:
    BankAccount(double initialBalance, double rate) {
        balance = initialBalance;
        rateOfInterest = rate;
        cout << "Account created with initial balance: " << balance << " and interest rate: " << rateOfInterest << "%" << endl;
    }

    ~BankAccount() {
        cout << "Account object destroyed. Thank you for using our services!" << endl;
    }

    void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            cout << "Deposited " << amount << ". New balance: " << balance << endl;
        } else {
            cout << "Invalid deposit amount!" << endl;
        }
    }

    void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            cout << "Withdrew " << amount << ". New balance: " << balance << endl;
        } else {
            cout << "Invalid withdrawal amount or insufficient funds!" << endl;
        }
    }

    void calculateCI(int years) {
        double compoundInterest = balance * pow(1 + rateOfInterest / 100, years) - balance;
        cout << "Compound interest for " << years << " years: " << compoundInterest << endl;
    }

    void displayBalance() {
        cout << "Current balance: " << balance << endl;
    }

    static void displayMenu() {
        cout << "\n--- Bank Account Menu ---\n";
        cout << "1. Deposit\n";
        cout << "2. Withdraw\n";
        cout << "3. Calculate Compound Interest\n";
        cout << "4. Display Balance\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
    }
};

int main() {
    double initialBalance, interestRate;
    int choice, years;
    double amount;

    cout << "Enter the initial balance: ";
    cin >> initialBalance;
    cout << "Enter the rate of interest (in %): ";
    cin >> interestRate;

    BankAccount account(initialBalance, interestRate);

    do {
        BankAccount::displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter amount to deposit: ";
                cin >> amount;
                account.deposit(amount);
                break;

            case 2:
                cout << "Enter amount to withdraw: ";
                cin >> amount;
                account.withdraw(amount);
                break;

            case 3:
                cout << "Enter number of years: ";
                cin >> years;
                account.calculateCI(years);
                break;

            case 4:
                account.displayBalance();
                break;

            case 5:
                cout << "Exiting the program." << endl;
                break;

            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 5);

    return 0;
}
 que 4 write the c++ program to implement circular linked list using array..

#include <iostream>
using namespace std;

class CircularLinkedList {
private:
    int *arr;
    int maxSize;
    int front, rear;

public:
    CircularLinkedList(int size) {
        maxSize = size;
        arr = new int[maxSize];
        front = -1;
        rear = -1;
    }

    ~CircularLinkedList() {
        delete[] arr;
    }

    bool isEmpty() {
        return (front == -1);
    }

    bool isFull() {
        return (front == 0 && rear == maxSize - 1) || (front == rear + 1);
    }

    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is full!" << endl;
        } else {
            if (front == -1) {
                front = 0;
                rear = 0;
            } else {
                rear = (rear + 1) % maxSize;
            }
            arr[rear] = value;
            cout << value << " enqueued to the circular linked list." << endl;
        }
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
        } else {
            cout << arr[front] << " dequeued from the circular linked list." << endl;
            if (front == rear) {
                front = -1;
                rear = -1;
            } else {
                front = (front + 1) % maxSize;
            }
        }
    }

    void display() {
        if (isEmpty()) {
            cout << "Circular linked list is empty!" << endl;
        } else {
            cout << "Circular Linked List: ";
            int i = front;
            while (i != rear) {
                cout << arr[i] << " ";
                i = (i + 1) % maxSize;
            }
            cout << arr[rear] << endl;
        }
    }
};

int main() {
    int size, choice, value;
    
    cout << "Enter the size of the circular linked list: ";
    cin >> size;
    
    CircularLinkedList cll(size);

    do {
        cout << "\n--- Menu ---\n";
        cout << "1. Enqueue\n";
        cout << "2. Dequeue\n";
        cout << "3. Display\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to enqueue: ";
                cin >> value;
                cll.enqueue(value);
                break;
            case 2:
                cll.dequeue();
                break;
            case 3:
                cll.display();
                break;
            case 4:
                cout << "Exiting the program.\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 4);

    return 0;
}











