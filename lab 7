---ques 1 tress
#include <iostream>
using namespace std;

// Node structure for the BST
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

// Class for Binary Search Tree
class BST {
public:
    Node* root;

    BST() { root = nullptr; }

    Node* insert(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }
        if (value < node->data) {
            node->left = insert(node->left, value);
        } else {
            node->right = insert(node->right, value);
        }
        return node;
    }

    void insert(int value) {
        root = insert(root, value);
    }

    void inorder(Node* node) {
        if (node == nullptr) return;
        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }

    void preorder(Node* node) {
        if (node == nullptr) return;
        cout << node->data << " ";
        preorder(node->left);
        preorder(node->right);
    }

    void postorder(Node* node) {
        if (node == nullptr) return;
        postorder(node->left);
        postorder(node->right);
        cout << node->data << " ";
    }

    void displayInorder() {
        inorder(root);
        cout << endl;
    }

    void displayPreorder() {
        preorder(root);
        cout << endl;
    }

    void displayPostorder() {
        postorder(root);
        cout << endl;
    }
};

int main() {
    BST tree;
    int n, value;
    cout << "Enter number of nodes: ";
    cin >> n;
    
    cout << "Enter values: ";
    for (int i = 0; i < n; i++) {
        cin >> value;
        tree.insert(value);
    }

    cout << "Inorder Traversal: ";
    tree.displayInorder();

    cout << "Preorder Traversal: ";
    tree.displayPreorder();

    cout << "Postorder Traversal: ";
    tree.displayPostorder();
    
    return 0;
}

---2 question 2
#include <iostream>
using namespace std;

// Base class
class Animal {
protected:
    string name;
public:
    Animal(string n) {
        name = n;
        cout << "Animal " << name << " created." << endl;
    }

    void display() {
        cout << "Animal Name: " << name << endl;
    }
};

// Derived class
class Dog : public Animal {
public:
    Dog(string n) : Animal(n) {
        cout << "Dog " << name << " is ready." << endl;
    }

    void bark() {
        cout << name << " says Woof! Woof!" << endl;
    }
};

int main() {
    Dog myDog("Buddy");
    myDog.display();
    myDog.bark();
    return 0;
}

